[{"/Users/admin/Documents/GitHub/QR-Site/src/components/SignIn/SignInComponent.js":"1","/Users/admin/Documents/GitHub/QR-Site/src/components/MFA/MFAEnrollComponent.js":"2","/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/SignUpComponent.js":"3","/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/signUpComponent.js":"4","/Users/admin/Documents/GitHub/QR-Site/src/components/Forgot/ForgotPassComponent.js":"5","/Users/admin/Documents/GitHub/QR-Site/src/App.js":"6","/Users/admin/Documents/GitHub/QR-Site/src/components/ResetPass/ResetPassComponent.js":"7","/Users/admin/Documents/GitHub/QR-Site/src/components/Loading/LoadingComponent.js":"8"},{"size":7271,"mtime":1613886699734,"results":"9","hashOfConfig":"10"},{"size":4269,"mtime":1613852030899,"results":"11","hashOfConfig":"10"},{"size":11998,"mtime":1613852046932,"results":"12","hashOfConfig":"10"},{"size":11998,"mtime":1613852633907,"results":"13","hashOfConfig":"10"},{"size":1949,"mtime":1613886225758,"results":"14","hashOfConfig":"10"},{"size":1473,"mtime":1613860270066,"results":"15","hashOfConfig":"10"},{"size":1139,"mtime":1613860572935,"results":"16","hashOfConfig":"10"},{"size":859,"mtime":1612398364032,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1a29mrq",{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/admin/Documents/GitHub/QR-Site/src/components/SignIn/SignInComponent.js",["36","37","38","39","40","41","42","43","44"],"/Users/admin/Documents/GitHub/QR-Site/src/components/MFA/MFAEnrollComponent.js",["45","46","47"],"/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/SignUpComponent.js",["48"],"/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/signUpComponent.js",["49"],"import React, { useState } from 'react';\nimport './signUp.css';\nimport myMedsLogo from '../../images/myMedsLogo.png';\nimport NavBarComponent from '../NavBar/NavBarComponent';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { signUpConfig } from '../../functions/config';\nimport TrueVaultClient from 'truevault';\nimport constant from '../../constants';\n\nconst tvClient = new TrueVaultClient({ apiKey: constant.adminApiKey })\n\nexport default function SignUpComponent() {\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [fName, setfName] = useState('');\n    const [lName, setlName] = useState('');\n    const [phone, setPhone] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordConfirm, setPasswordConfirm] = useState('');\n\n    const returnToSignIn = () => {\n        history.push(\"/\");\n    }\n\n    const signUpViewUser = async () => {\n        await dispatch({ type: \"MAKE_REQUEST\" })\n\n        let data = JSON.stringify({\"full_name\":\"Zaz Cruz\",\"email\":\"test35@gmail.com\",\"phone\":\"8888888835\",\"password\":\"test123\"});\n        let config = signUpConfig(data);\n\n        try{\n            let response = await axios(config)\n            console.log(JSON.stringify(response.data));\n        }\n        catch(error){\n            console.log(\"An error occurred during sign-up: \", error.response.data)\n        }\n    }\n\n    const submitSignUp = async(event) => {\n        event.preventDefault()\n        await signUpViewUser();\n    }\n    \n    const resetInputFields = () => {\n        setfName('')\n        setlName('')\n        setPhone('')\n        setEmail('')\n        setPassword('')\n        setPasswordConfirm('')\n    }\n\n    const signUpTVUser = async (event, email, password, firstName, lastName, phoneNum) => {\n        event.preventDefault()\n        let tvAttributes = {name: firstName, lastName: lastName, phone: phoneNum}\n        let groupIds = []\n        groupIds.push(constant.tvGroupDocId)\n        console.log(`signupTvUser function started`)\n\n        try {\n            const newDoctor = await tvClient.createUser(email, password, tvAttributes)\n            console.log(newDoctor)\n            await tvClient.addUsersToGroup(constant.tvGroupDocId, [newDoctor.id])\n            await tvClient.addUsersToGroup(constant.mfaGroupId, [newDoctor.id])\n            const multiAuth = await tvClient.startUserMfaEnrollment(newDoctor.id, 'myMedsRec')\n            await dispatch({ type: \"ADD_MFA_QR_CODE\", payload: multiAuth.qr_code_svg })                \n            await resetInputFields()\n            // await dispatch({ type: \"ADD_CREATED_TV_USER\", payload: newDoctor })\n            // alert(`Thank you! You have successfully signed up to myMedsRec!`)\n            history.push({\n                pathname: '/mfa-enroll',\n                state: { tvClient: tvClient, newDoctorId: newDoctor.id, newDoctor: newDoctor }\n            })\n        } catch (error) {\n            resetInputFields()\n            console.log(`An error occured while creating a new Doctor user: `, error)\n        }\n    }\n\n    return (\n        <div className=\"signUpContent\">\n            <div className=\"d-none d-sm-none d-md-flex signUpComponentDesktop\">\n                <span className=\"leftMyMedsSection\">\n                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\", position: \"relative\", bottom: \"8vh\"}}>\n                        <div className=\"col-6\">\n                            <img src={myMedsLogo} alt=\"signUpMyMedsLogo\" className=\"img-fluid\"/>\n                        </div>\n                    </div>\n                </span>\n                <span className=\"rightMyMedsSection\">\n                    <button type=\"button\" onClick={() => returnToSignIn()} className=\"btn btn-outline-primary signInBtnDesktop\">Sign In</button>\n                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\", position: \"relative\", bottom: \"5vh\"}}>\n                        <div className=\"col-9\" style={{position: \"relative\", right: \"1vw\", textAlign: \"center\"}}>\n                            <h4 style={{fontWeight: \"700\"}}>Sign Up</h4>\n                        </div>\n                    </div>\n                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\"}}>\n                        <div className=\"col-5\" style={{position: \"relative\", right: \"1vw\"}}>\n                            <form>\n                                <div className=\"form-row\">\n                                    <div className=\"form-group col-md-6\">\n                                    <input onChange={e => setfName(e.target.value)} value={fName} type=\"name\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"First Name\" />\n                                    </div>\n                                    <div className=\"form-group col-md-6\">\n                                    <input onChange={e => setlName(e.target.value)} value={lName} type=\"lastName\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Last Name\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input onChange={e => setEmail(e.target.value)} value={email} type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"Email Address\"/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input onChange={e => setPhone(e.target.value)} value={phone} type=\"text\" className=\"form-control\" id=\"inputPhone\" placeholder=\"Phone Number\"/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input onChange={e => setPassword(e.target.value)} value={password} type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Create Password\"/>\n                                </div>\n                                <div className=\"form-row\">\n                                    <div className=\"form-group col-md-12\">\n                                    <input onChange={e => setPasswordConfirm(e.target.value)} value={passwordConfirm} type=\"text\" className=\"form-control\" id=\"inputCity\" placeholder=\"Confirm Password\" />\n                                    </div>\n                                </div>\n                                <div className=\"row no-gutters\" style={{width: \"100%\", position: \"relative\", top: \"10vh\"}}>\n                                    <div className=\"col-12\">\n                                        <button onClick={(event) => signUpTVUser(event, email, password, fName, lName, phone) } type=\"submit\" className=\"signUpBtn btn btn-primary\" >Sign up for myMeds</button>\n                                    </div>\n                                    <div className=\"col-12\" style={{textAlign: \"center\", position: \"relative\", top: \"2vh\"}}>\n                                        <small className=\"form-text text-muted\">By clicking \"Sign up for myMeds\" You agree to our Terms of Service and Privacy Statement</small>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </span>\n            </div>\n            <div className=\"d-block d-sm-block d-md-none d-lg-none signUpComponentMobile\">\n                <NavBarComponent />\n                <div className=\"signUpContentMobile\">\n                    <div className=\"row no-gutters signUpTitleRowMobile\" style={{width: \"100%\"}}>\n                        <div className=\"col-6\" style={{textAlign: \"center\"}}>\n                            <h4>Sign Up</h4>\n                        </div>\n                    </div>\n                    <div className=\"row no-gutters align-items-center justify-content-center\">\n                        <div className=\"col-8\">\n                            <div className=\"signUpContainerMobile\">\n                                <form>\n                                    <div className=\"signUpInputsMobile\">\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-5\">\n                                            <input onChange={e => setfName(e.target.value)} value={fName} type=\"name\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"First Name\" />\n                                            </div>\n                                            <div className=\"form-group col-5\">\n                                            <input onChange={e => setlName(e.target.value)} value={lName} type=\"lastname\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Last Name\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                                <input onChange={e => setEmail(e.target.value)} value={email} type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"Email Address\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                                <input onChange={e => setPhone(e.target.value)} value={phone} type=\"text\" className=\"form-control\" id=\"inputPhone\" placeholder=\"Phone Number\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                                <input onChange={e => setPassword(e.target.value)} value={password} type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Create Password\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                            <input onChange={e => setPasswordConfirm(e.target.value)} value={passwordConfirm} type=\"text\" className=\"form-control\" id=\"inputCity\" placeholder=\"Confirm Password\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\", position: \"relative\", top: \"10vh\"}}>\n                                        <div className=\"col-10\">\n                                            <button onClick={(event) => signUpTVUser(event, email, password, fName, lName, phone) } type=\"submit\" className=\"signUpBtn btn btn-primary\" >Sign up for myMeds</button>\n                                        </div>\n                                        <div className=\"col-10\" style={{textAlign: \"center\", position: \"relative\", top: \"2vh\"}}>\n                                            <small className=\"form-text text-muted\">By clicking \"Sign up for myMeds\" You agree to our Terms of Service and Privacy Statement</small>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n",["50","51"],"/Users/admin/Documents/GitHub/QR-Site/src/components/Forgot/ForgotPassComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/App.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/ResetPass/ResetPassComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/Loading/LoadingComponent.js",[],{"ruleId":"52","severity":1,"message":"53","line":18,"column":11,"nodeType":"54","messageId":"55","endLine":18,"endColumn":19},{"ruleId":"52","severity":1,"message":"56","line":19,"column":11,"nodeType":"54","messageId":"55","endLine":19,"endColumn":15},{"ruleId":"52","severity":1,"message":"57","line":20,"column":11,"nodeType":"54","messageId":"55","endLine":20,"endColumn":16},{"ruleId":"52","severity":1,"message":"58","line":21,"column":11,"nodeType":"54","messageId":"55","endLine":21,"endColumn":16},{"ruleId":"52","severity":1,"message":"59","line":22,"column":11,"nodeType":"54","messageId":"55","endLine":22,"endColumn":24},{"ruleId":"52","severity":1,"message":"60","line":23,"column":11,"nodeType":"54","messageId":"55","endLine":23,"endColumn":23},{"ruleId":"52","severity":1,"message":"61","line":33,"column":11,"nodeType":"54","messageId":"55","endLine":33,"endColumn":24},{"ruleId":"52","severity":1,"message":"62","line":79,"column":11,"nodeType":"54","messageId":"55","endLine":79,"endColumn":23},{"ruleId":"63","severity":1,"message":"64","line":87,"column":8,"nodeType":"65","endLine":87,"endColumn":10,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":47,"column":8,"nodeType":"65","endLine":47,"endColumn":19,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":56,"column":33,"nodeType":"71","messageId":"72","endLine":56,"endColumn":35},{"ruleId":"73","severity":1,"message":"74","line":59,"column":25,"nodeType":"75","endLine":59,"endColumn":107},{"ruleId":"52","severity":1,"message":"76","line":44,"column":11,"nodeType":"54","messageId":"55","endLine":44,"endColumn":23},{"ruleId":"52","severity":1,"message":"76","line":44,"column":11,"nodeType":"54","messageId":"55","endLine":44,"endColumn":23},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},"no-unused-vars","'isLogged' is assigned a value but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'count' is assigned a value but never used.","'state' is assigned a value but never used.","'viewUserEmail' is assigned a value but never used.","'viewUserAuth' is assigned a value but never used.","'loginViewUser' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mfaQRCode'. Either include it or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'tvClient'. Either include it or remove the dependency array.",["82"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'submitSignUp' is assigned a value but never used.","no-native-reassign",["83"],"no-negated-in-lhs",["84"],{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [mfaQRCode]",{"range":"89","text":"90"},"Update the dependencies array to be: [mfaQRCode, tvClient]",{"range":"91","text":"92"},[3293,3295],"[mfaQRCode]",[1946,1957],"[mfaQRCode, tvClient]"]