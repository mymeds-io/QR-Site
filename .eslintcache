[{"/Users/admin/Documents/GitHub/QR-Site/src/components/SignIn/SignInComponent.js":"1","/Users/admin/Documents/GitHub/QR-Site/src/components/MFA/MFAEnrollComponent.js":"2","/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/SignUpComponent.js":"3","/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/signUpComponent.js":"4","/Users/admin/Documents/GitHub/QR-Site/src/components/Forgot/ForgotPassComponent.js":"5","/Users/admin/Documents/GitHub/QR-Site/src/App.js":"6","/Users/admin/Documents/GitHub/QR-Site/src/components/ResetPass/ResetPassComponent.js":"7","/Users/admin/Documents/GitHub/QR-Site/src/components/Loading/LoadingComponent.js":"8","/Users/admin/Documents/GitHub/QR-Site/src/components/MedList/MedListComponent.js":"9","/Users/admin/Documents/GitHub/QR-Site/src/components/Home/HomeComponent.js":"10","/Users/admin/Documents/GitHub/QR-Site/src/components/User/TrackedPtComponent.js":"11","/Users/admin/Documents/GitHub/QR-Site/src/reportWebVitals.js":"12","/Users/admin/Documents/GitHub/QR-Site/src/components/Tracked/TrackedComponent.js":"13","/Users/admin/Documents/GitHub/QR-Site/src/components/Skeletons/Shimmer.js":"14","/Users/admin/Documents/GitHub/QR-Site/src/functions/useFetchPts.js":"15"},{"size":8001,"mtime":1614042837190,"results":"16","hashOfConfig":"17"},{"size":4269,"mtime":1613852030899,"results":"18","hashOfConfig":"17"},{"size":11998,"mtime":1613852046932,"results":"19","hashOfConfig":"17"},{"size":11998,"mtime":1613852633907,"results":"20","hashOfConfig":"17"},{"size":1949,"mtime":1614017958969,"results":"21","hashOfConfig":"17"},{"size":1473,"mtime":1613860270066,"results":"22","hashOfConfig":"17"},{"size":2316,"mtime":1613969004745,"results":"23","hashOfConfig":"17"},{"size":859,"mtime":1612398364032,"results":"24","hashOfConfig":"17"},{"size":5993,"mtime":1612398364033,"results":"25","hashOfConfig":"17"},{"size":831,"mtime":1612398364032,"results":"26","hashOfConfig":"17"},{"size":2509,"mtime":1612487459694,"results":"27","hashOfConfig":"17"},{"size":362,"mtime":1612398364041,"results":"28","hashOfConfig":"17"},{"size":373,"mtime":1612398364037,"results":"29","hashOfConfig":"17"},{"size":179,"mtime":1612398364036,"results":"30","hashOfConfig":"17"},{"size":1481,"mtime":1612398364039,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1a29mrq",{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/admin/Documents/GitHub/QR-Site/src/components/SignIn/SignInComponent.js",["66","67","68","69","70","71","72","73","74"],"/Users/admin/Documents/GitHub/QR-Site/src/components/MFA/MFAEnrollComponent.js",["75","76","77"],"/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/SignUpComponent.js",["78"],"/Users/admin/Documents/GitHub/QR-Site/src/components/SignUp/signUpComponent.js",["79"],"import React, { useState } from 'react';\nimport './signUp.css';\nimport myMedsLogo from '../../images/myMedsLogo.png';\nimport NavBarComponent from '../NavBar/NavBarComponent';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { signUpConfig } from '../../functions/config';\nimport TrueVaultClient from 'truevault';\nimport constant from '../../constants';\n\nconst tvClient = new TrueVaultClient({ apiKey: constant.adminApiKey })\n\nexport default function SignUpComponent() {\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [fName, setfName] = useState('');\n    const [lName, setlName] = useState('');\n    const [phone, setPhone] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordConfirm, setPasswordConfirm] = useState('');\n\n    const returnToSignIn = () => {\n        history.push(\"/\");\n    }\n\n    const signUpViewUser = async () => {\n        await dispatch({ type: \"MAKE_REQUEST\" })\n\n        let data = JSON.stringify({\"full_name\":\"Zaz Cruz\",\"email\":\"test35@gmail.com\",\"phone\":\"8888888835\",\"password\":\"test123\"});\n        let config = signUpConfig(data);\n\n        try{\n            let response = await axios(config)\n            console.log(JSON.stringify(response.data));\n        }\n        catch(error){\n            console.log(\"An error occurred during sign-up: \", error.response.data)\n        }\n    }\n\n    const submitSignUp = async(event) => {\n        event.preventDefault()\n        await signUpViewUser();\n    }\n    \n    const resetInputFields = () => {\n        setfName('')\n        setlName('')\n        setPhone('')\n        setEmail('')\n        setPassword('')\n        setPasswordConfirm('')\n    }\n\n    const signUpTVUser = async (event, email, password, firstName, lastName, phoneNum) => {\n        event.preventDefault()\n        let tvAttributes = {name: firstName, lastName: lastName, phone: phoneNum}\n        let groupIds = []\n        groupIds.push(constant.tvGroupDocId)\n        console.log(`signupTvUser function started`)\n\n        try {\n            const newDoctor = await tvClient.createUser(email, password, tvAttributes)\n            console.log(newDoctor)\n            await tvClient.addUsersToGroup(constant.tvGroupDocId, [newDoctor.id])\n            await tvClient.addUsersToGroup(constant.mfaGroupId, [newDoctor.id])\n            const multiAuth = await tvClient.startUserMfaEnrollment(newDoctor.id, 'myMedsRec')\n            await dispatch({ type: \"ADD_MFA_QR_CODE\", payload: multiAuth.qr_code_svg })                \n            await resetInputFields()\n            // await dispatch({ type: \"ADD_CREATED_TV_USER\", payload: newDoctor })\n            // alert(`Thank you! You have successfully signed up to myMedsRec!`)\n            history.push({\n                pathname: '/mfa-enroll',\n                state: { tvClient: tvClient, newDoctorId: newDoctor.id, newDoctor: newDoctor }\n            })\n        } catch (error) {\n            resetInputFields()\n            console.log(`An error occured while creating a new Doctor user: `, error)\n        }\n    }\n\n    return (\n        <div className=\"signUpContent\">\n            <div className=\"d-none d-sm-none d-md-flex signUpComponentDesktop\">\n                <span className=\"leftMyMedsSection\">\n                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\", position: \"relative\", bottom: \"8vh\"}}>\n                        <div className=\"col-6\">\n                            <img src={myMedsLogo} alt=\"signUpMyMedsLogo\" className=\"img-fluid\"/>\n                        </div>\n                    </div>\n                </span>\n                <span className=\"rightMyMedsSection\">\n                    <button type=\"button\" onClick={() => returnToSignIn()} className=\"btn btn-outline-primary signInBtnDesktop\">Sign In</button>\n                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\", position: \"relative\", bottom: \"5vh\"}}>\n                        <div className=\"col-9\" style={{position: \"relative\", right: \"1vw\", textAlign: \"center\"}}>\n                            <h4 style={{fontWeight: \"700\"}}>Sign Up</h4>\n                        </div>\n                    </div>\n                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\"}}>\n                        <div className=\"col-5\" style={{position: \"relative\", right: \"1vw\"}}>\n                            <form>\n                                <div className=\"form-row\">\n                                    <div className=\"form-group col-md-6\">\n                                    <input onChange={e => setfName(e.target.value)} value={fName} type=\"name\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"First Name\" />\n                                    </div>\n                                    <div className=\"form-group col-md-6\">\n                                    <input onChange={e => setlName(e.target.value)} value={lName} type=\"lastName\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Last Name\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input onChange={e => setEmail(e.target.value)} value={email} type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"Email Address\"/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input onChange={e => setPhone(e.target.value)} value={phone} type=\"text\" className=\"form-control\" id=\"inputPhone\" placeholder=\"Phone Number\"/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input onChange={e => setPassword(e.target.value)} value={password} type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Create Password\"/>\n                                </div>\n                                <div className=\"form-row\">\n                                    <div className=\"form-group col-md-12\">\n                                    <input onChange={e => setPasswordConfirm(e.target.value)} value={passwordConfirm} type=\"text\" className=\"form-control\" id=\"inputCity\" placeholder=\"Confirm Password\" />\n                                    </div>\n                                </div>\n                                <div className=\"row no-gutters\" style={{width: \"100%\", position: \"relative\", top: \"10vh\"}}>\n                                    <div className=\"col-12\">\n                                        <button onClick={(event) => signUpTVUser(event, email, password, fName, lName, phone) } type=\"submit\" className=\"signUpBtn btn btn-primary\" >Sign up for myMeds</button>\n                                    </div>\n                                    <div className=\"col-12\" style={{textAlign: \"center\", position: \"relative\", top: \"2vh\"}}>\n                                        <small className=\"form-text text-muted\">By clicking \"Sign up for myMeds\" You agree to our Terms of Service and Privacy Statement</small>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </span>\n            </div>\n            <div className=\"d-block d-sm-block d-md-none d-lg-none signUpComponentMobile\">\n                <NavBarComponent />\n                <div className=\"signUpContentMobile\">\n                    <div className=\"row no-gutters signUpTitleRowMobile\" style={{width: \"100%\"}}>\n                        <div className=\"col-6\" style={{textAlign: \"center\"}}>\n                            <h4>Sign Up</h4>\n                        </div>\n                    </div>\n                    <div className=\"row no-gutters align-items-center justify-content-center\">\n                        <div className=\"col-8\">\n                            <div className=\"signUpContainerMobile\">\n                                <form>\n                                    <div className=\"signUpInputsMobile\">\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-5\">\n                                            <input onChange={e => setfName(e.target.value)} value={fName} type=\"name\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"First Name\" />\n                                            </div>\n                                            <div className=\"form-group col-5\">\n                                            <input onChange={e => setlName(e.target.value)} value={lName} type=\"lastname\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Last Name\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                                <input onChange={e => setEmail(e.target.value)} value={email} type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"Email Address\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                                <input onChange={e => setPhone(e.target.value)} value={phone} type=\"text\" className=\"form-control\" id=\"inputPhone\" placeholder=\"Phone Number\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                                <input onChange={e => setPassword(e.target.value)} value={password} type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Create Password\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-row justify-content-center\">\n                                            <div className=\"form-group col-10\">\n                                            <input onChange={e => setPasswordConfirm(e.target.value)} value={passwordConfirm} type=\"text\" className=\"form-control\" id=\"inputCity\" placeholder=\"Confirm Password\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"row no-gutters justify-content-center\" style={{width: \"100%\", position: \"relative\", top: \"10vh\"}}>\n                                        <div className=\"col-10\">\n                                            <button onClick={(event) => signUpTVUser(event, email, password, fName, lName, phone) } type=\"submit\" className=\"signUpBtn btn btn-primary\" >Sign up for myMeds</button>\n                                        </div>\n                                        <div className=\"col-10\" style={{textAlign: \"center\", position: \"relative\", top: \"2vh\"}}>\n                                            <small className=\"form-text text-muted\">By clicking \"Sign up for myMeds\" You agree to our Terms of Service and Privacy Statement</small>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n",["80","81"],"/Users/admin/Documents/GitHub/QR-Site/src/components/Forgot/ForgotPassComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/App.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/ResetPass/ResetPassComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/Loading/LoadingComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/MedList/MedListComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/Home/HomeComponent.js",["82"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport NavBarComponent from '../NavBar/NavBarComponent';\nimport SignInComponent from '../SignIn/SignInComponent';\nimport LoadingOverlay from 'react-loading-overlay';\n\nfunction HomeComponent() {\n\n    const state = useSelector(state => state)\n    const loading = useSelector(state => state.loading)\n\n    useEffect(() => {\n        console.log(\"Current state from home component: \", state)\n    }, [])\n\n    return (\n        <div className=\"homeComponent\">\n            <LoadingOverlay\n                active={loading}\n                spinner\n                text='Signing in...'\n                >\n                <NavBarComponent />\n                <SignInComponent />\n            </LoadingOverlay>\n        </div>\n    )\n}\n\nexport default HomeComponent;",["83","84"],"/Users/admin/Documents/GitHub/QR-Site/src/components/User/TrackedPtComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/reportWebVitals.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/Tracked/TrackedComponent.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/components/Skeletons/Shimmer.js",[],"/Users/admin/Documents/GitHub/QR-Site/src/functions/useFetchPts.js",["85"],{"ruleId":"86","severity":1,"message":"87","line":19,"column":11,"nodeType":"88","messageId":"89","endLine":19,"endColumn":19},{"ruleId":"86","severity":1,"message":"90","line":20,"column":11,"nodeType":"88","messageId":"89","endLine":20,"endColumn":15},{"ruleId":"86","severity":1,"message":"91","line":21,"column":11,"nodeType":"88","messageId":"89","endLine":21,"endColumn":16},{"ruleId":"86","severity":1,"message":"92","line":22,"column":11,"nodeType":"88","messageId":"89","endLine":22,"endColumn":16},{"ruleId":"86","severity":1,"message":"93","line":23,"column":11,"nodeType":"88","messageId":"89","endLine":23,"endColumn":24},{"ruleId":"86","severity":1,"message":"94","line":24,"column":11,"nodeType":"88","messageId":"89","endLine":24,"endColumn":23},{"ruleId":"86","severity":1,"message":"95","line":34,"column":11,"nodeType":"88","messageId":"89","endLine":34,"endColumn":24},{"ruleId":"86","severity":1,"message":"96","line":80,"column":11,"nodeType":"88","messageId":"89","endLine":80,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":93,"column":8,"nodeType":"99","endLine":93,"endColumn":10,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":47,"column":8,"nodeType":"99","endLine":47,"endColumn":19,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":56,"column":33,"nodeType":"105","messageId":"106","endLine":56,"endColumn":35},{"ruleId":"107","severity":1,"message":"108","line":59,"column":25,"nodeType":"109","endLine":59,"endColumn":107},{"ruleId":"86","severity":1,"message":"110","line":44,"column":11,"nodeType":"88","messageId":"89","endLine":44,"endColumn":23},{"ruleId":"86","severity":1,"message":"110","line":44,"column":11,"nodeType":"88","messageId":"89","endLine":44,"endColumn":23},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"97","severity":1,"message":"115","line":14,"column":8,"nodeType":"99","endLine":14,"endColumn":10,"suggestions":"116"},{"ruleId":"111","replacedBy":"117"},{"ruleId":"113","replacedBy":"118"},{"ruleId":"97","severity":1,"message":"119","line":49,"column":8,"nodeType":"99","endLine":49,"endColumn":10,"suggestions":"120"},"no-unused-vars","'isLogged' is assigned a value but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'count' is assigned a value but never used.","'state' is assigned a value but never used.","'viewUserEmail' is assigned a value but never used.","'viewUserAuth' is assigned a value but never used.","'loginViewUser' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mfaQRCode'. Either include it or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'tvClient'. Either include it or remove the dependency array.",["122"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'submitSignUp' is assigned a value but never used.","no-native-reassign",["123"],"no-negated-in-lhs",["124"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["125"],["123"],["124"],"React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["126"],{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [mfaQRCode]",{"range":"135","text":"136"},"Update the dependencies array to be: [mfaQRCode, tvClient]",{"range":"137","text":"138"},"Update the dependencies array to be: [state]",{"range":"139","text":"140"},"Update the dependencies array to be: [config]",{"range":"141","text":"142"},[3501,3503],"[mfaQRCode]",[1946,1957],"[mfaQRCode, tvClient]",[478,480],"[state]",[1457,1459],"[config]"]